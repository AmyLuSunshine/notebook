:PROPERTIES:
:ID:       27ace67b-11a2-4475-ac4d-e1f7ee8f5be4
:END:
#+title: TCP
#+filetags: :Networking:

- tags :: [[id:e3c4ce8a-faa5-4e54-b368-03a0dd8ead33][Networking]], [[id:7214a344-872c-457b-a28d-928b53289c3d][TCP/IP]], [[id:f6abdf39-776e-49a1-8e51-f5a49ac276d3][UDP]]

TCP is a protocol that guarantees a reliable network communication over an unreliable network.

* The Three-way Handshake

** synchronize (SYN)

   tell the server about client's capabilities and preferred window setting

** acknowledgment and synchronize (ACK and SYN)

   ACK tells the client the server acknowledges receipt of the client's SYN packet.

   SYN tells the client what setting it's agreed to for the *duration* of the conversation.

** client ACK

   Finally, the client replies with an ACK packet to acknowledge the server's SYN packet, completing the three-way handshake.

* Gracefully Terminating TCP Sessions

- [[https://media.geeksforgeeks.org/wp-content/uploads/CN.png][graphic explain]]

* Receive Buffer

  both client and server have their per-connection receive buffer.

  A receive buffer is a block of memory that accept a certain amount of data from the network without requiring an applicaiton to immediately read the data.

* Header

 - minimum length is 20 octets
 - TCP header contains various data segment flow control functionalities
 - padding may be added to make the TCP header length a multiple of 32 bit words.

** Checksum

   - Error Detection Code added to protect the TCP header

** Source & Destination Ports

- Frequently used port numbers

  - 20 = FTP
  - 21 = FTP control
  - 23 = Telnet
  - 25 = SMTP
  - 53 = DNS
  - 80 = HTTP
  - 143 = IMAP

** Flags

 - PSH (push) = 1 pushes the data segment to the receiving application
 - URG (urgent) = 1 the urgent pointer field, which points to the urgent data location, is in use.

* Flow Control
  - source :: [[https://www.brianstorti.com/tcp-flow-control/][TCP Flow Control]]

    (sender -> receiver)

  TCP will ensure that a sender is not overwhelming a receiver by sending packets faster than it can consume.

  - receiver will send some feedback to the sender

  Everytime TCP receives a packet, it needs to send an `ack` message to the sender, acknowledging it received that packet correctly, and with this `ack` message it sends the value of the current receive window, so the sender knows if it can keep sending data.

** window size

   the number of bytes the sender can transmit to the receiver without requiring an acknowledgment.

   a window size of zero indicates that the receiver's buffer is full and can no longer receiver additional data.

* Congestion Control

    (node -> network)

  network is prevented from congestion
