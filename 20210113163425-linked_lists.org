:PROPERTIES:
:ID:       f9315725-7bf9-435a-9975-7330edb8a16a
:END:
#+title: Linked Lists
#+filetags: :Data_Structures:

- tags :: [[id:d60fba8c-d682-4968-bed3-88726dbbeea2][Data Structures]]

* List API

| API            | Operation                    |
|----------------+------------------------------|
| pushFront(Key) | add key to front             |
|                |                              |
| topFront()     | return key of the front item |
|                |                              |
| popFront()     | remove the front item        |
|                |                              |
| pushBack()     | add item to back             |
|                |                              |
| topBack()      | return key of back item      |
|                |                              |
| popback()      | remove back item             |
|                |                              |
| find(Key)      | is key in list?              |
|                |                              |
| erase(Key)     | remove key from list         |
|                |                              |
| empty()        | is list empty?               |

* struct

 #+begin_src go
type node struct {
	key  int
	next *node
}

type list struct {
	head   *node // ptr to head node **important**
	length int
}
 #+end_src


 
* JS

  #+begin_src js
class ListNode {
    constructor (val, next) {
	this.val = val ? val : 0;
	this.next = next ? next : null;
    }

    [Deno.customInspect]() {
	let arr = [];
	let cur = this;

	while (cur !== null) {
	    arr.push(cur.val);
	    cur = cur.next;
	}
	let res = arr.join(", ");
	res = `[${res}]`
	return res;
    }
}


var newList = function(n) {
    const dummy = new ListNode;
    let cur = dummy;
    
    for (let i = 0; i < n; i++) {
	const node = new ListNode(i);
	cur.next = node;
	cur = cur.next;
    }

    return dummy.next;
}

var copy = function(head) {
    if (head === null) return null;
    let dummy = new ListNode();
    let cur1 = head;
    let cur2 = dummy;

    while (cur1 !== null) {
	const node = new ListNode(cur1.val);
	cur2.next = node;
	cur1 = cur1.next;
	cur2 = cur2.next;
    }

    return dummy.next;
}


const l1 = newList(10000);
console.log(l1);
  #+end_src
