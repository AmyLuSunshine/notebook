:PROPERTIES:
:ID:       b55c3bf0-cd48-4f5f-bd6a-5a58f190906b
:END:
#+title: Slice
#+filetags: :Golang:

- tag :: [[id:5b9263ba-57ab-487c-bde1-970cda17283c][Golang]]

* Literal

#+begin_src go
s := []int{1, 2, 3}
fmt.Println([]int{} == nil)  // false
#+end_src

* Declaration

#+begin_src go
var s []int
fmt.Println([]int{} == nil)  // true
#+end_src

* make()

#+begin_src go
s := make([]int, len, cap)
x := make([]int, 0)
fmt.Println(x == nil) // false
#+end_src

* copy()

#+begin_src go
x := []int{1, 2, 3, 4}
y := make([]int, 10)
num := copy(y, x)
fmt.Println(y, num)
#+end_src

copy(to, from) return number of elements that have been copied. this function copy as many as it can.

* subslice from an array

#+begin_src go
arr := [4]int{1, 2, 3, 4}
x := arr[:]  // all elements
x := arr[1:] // [2, 3, 4]
x := arr[:2] // [1, 2]
#+end_src

* modify a slice in function

** you can modify fields(elements) in slice

#+begin_src go
func modifySlice(s []int) {
        // modify fields before assigning new slice to s
	s[5] = 10 
	s = append(s, []int{1, 2, 3}...)
}

func main() {
	s := make([]int, 10, 10)
	fmt.Println(s, len(s), cap(s))
	modifySlice(s)
	fmt.Println(s, len(s), cap(s)) 
}
#+end_src

** no effect

#+begin_src go
func modifySlice(s []int) {
	s = append(s, []int{1, 2, 3}...)
        // modify after assigning new slice, so no effect outside
	s[5] = 10 
}

func main() {
	s := make([]int, 10, 10)
	fmt.Println(s, len(s), cap(s))
	modifySlice(s)
	fmt.Println(s, len(s), cap(s)) 
}
#+end_src

