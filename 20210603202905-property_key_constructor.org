:PROPERTIES:
:ID:       995cf0dd-a96a-407d-b4b7-8f112e04aafe
:END:
#+title: Property Key "Constructor"
#+filetags: :Javascript:

- tags :: [[id:98730b92-6677-4ef0-bf88-3c8cf7a33504][Javascript]], [[id:a6917226-1993-44ca-8612-43dc0849da68][Objects]], [[id:80da4719-f62a-442d-9bfa-79b380c56f1e][Constructor]]

Every function has a property key, "prototype".

For user-defined fucntion f, the value of f.prototype by default is {"constructor": f}

#+begin_src js
function FF() {}

// res: [Function: FF]
console.log(FF.prototype.constructor);

// res: [ "constructor" ]
console.log(Object.getOwnPropertyNames(FF.prototype));

const jj = new FF();
// prototype is FF.prototype
console.log(jj instanceof FF);
console.log(Reflect.getPrototypeOf(jj) === FF.prototype);
console.log(jj.constructor === FF);
#+end_src

* instanceof is not reliable

#+begin_src js
const obj = {};
function FF() {}
const jj = new FF();

// jj is an instance of FF
console.log(jj instanceof FF); // true

// but after setting FF's prototype, it violates the relationship
FF.prototype = obj;
console.log(jj instanceof FF); // false
#+end_src
