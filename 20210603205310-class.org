:PROPERTIES:
:ID:       8a7960f6-451a-4d8c-b987-703303ade112
:END:
#+title: Class
#+filetags: :Javascript:

- tags :: [[id:98730b92-6677-4ef0-bf88-3c8cf7a33504][Javascript]]

* Declare a class

#+begin_src js
class class_name {
  method1
  method2
  method3
}
#+end_src

** Class-side properties and instance properties
  - Static (Class-side) properties must be defined *outside* of the class block.
  - Instance properties must be defined *inside* of the class block.

#+begin_src js
class Mammalia {
  //produceMilk = true;
}

// the two statements below have the same functionality
Mammalia.produceMilk = true;
//Mammalia.prototype.produceMilk = true;

const M = new Mammalia();
console.log(Mammalia.hasOwnProperty("produceMilk"));
console.log(M.hasOwnProperty("produceMilk"));
#+end_src

* Class expressions

Class expressions can be named and unnamed. 

|                              | named class   | unamed class  |
|------------------------------+---------------+---------------|
| name of constructor fucntion | variable name | variable name |
| name of prototype            | class name    | variable name |

#+begin_src js
// unnamed
let Rectangle = class {
  constructor(height, width) {
    this.height = height;
    this.width = width;
  }
};
console.log(Rectangle.name);
// output: "Rectangle"

// named
let Rectangle = class Rectangle2 {
  constructor(height, width) {
    this.height = height;
    this.width = width;
  }
};
console.log(Rectangle.name);
// output: "Rectangle2"

#+end_src

* Static

  objects created by new class() do not inherit static method.

* Private properties

You can define private properties within a class. This is a new feature. Support in browser is limited.

#+begin_src js
class Mammalia {
  #milk;
  constructor() {
    this.#milk = true;
  }
}

class Dog extends Mammalia {
  constructor(name) {
    super(Mammalia);
    console.log("dog type", `"${name}"`, "created");
    this.name = name;
  }
}

const husky = new Dog("husky");
// unable to read the property milk
console.log(husky)
// undefined
console.log(husky.mile)

// access the private property within the class that defines it.
const M = new Mammalia();
M.milk = false;
console.log(M);
#+end_src

* Styles

class method should use this binding, or make the method static.

#+begin_src js
class Foo() {
  bar() {
    console.log(this.bar);
  }
}

// or
class Foo() {
  static bar() {
    console.log('bar');
  }
}
#+end_src
