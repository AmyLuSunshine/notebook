:PROPERTIES:
:ID:       182f7a92-7a23-4ee4-95f7-b258d39673f5
:END:
#+title: Hash Tables
#+filetags: :Data_Structures:

- tags :: [[id:d60fba8c-d682-4968-bed3-88726dbbeea2][Data Structures]]

* Applications

  - password verification

* Dictionaries

A dictionary is a key-value pair abstract data structure. 

| API                | Operation                                 |
|--------------------+-------------------------------------------|
| Search(Key)        | return the corresponding value            |
|                    |                                           |
| Insert(Key, Value) | insert a key-value pair in the dictionary |
|                    |                                           |
| Delete(Key)        | delete the key-value pair                 |


* Hash Tables

  Hash table is an effective data structure for implementing dictionaries. 

** store value

use an array

** hash function 

key -> hash function -> hash code (index of the array)

we use a hash function to compute the slot of the key. Then with the index, we can retrieve the corresponding value.

** collision

two keys have the same hash code.

*** chaining

    place all elements that hash to the same slot into the same linked-list.



| API                | Operation                                        |
|--------------------+--------------------------------------------------|
| Search(Key)        | return the corresponding value                   |
|                    |                                                  |
| Insert(Key, Value) | insert a key-value pair in the dictionary        |
|                    |                                                  |
| Delete(Key)        | delete the key-value pair                        |
|                    |                                                  |
| MakeHashTable()    | initialize a hashtable and return the hash table |
|                    |                                                  |
| PrintTable()       | print the hash table by each slot                |

* Hash Dos
  :PROPERTIES:
  :ID:       7a2fa143-8bb6-4759-9722-66eb9276cc23
  :END:
  
   If maps always hash items to the exact same values, and you know that a server is storing some user data in a map, you can actually slow down a server with an attack called Hash DoS by sending it specially crafted data where all of the key hash to the same bucket.

