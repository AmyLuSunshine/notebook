:PROPERTIES:
:ID:       a6917226-1993-44ca-8612-43dc0849da68
:END:
#+title: Objects
#+filetags: :Javascript:

- tags :: [[id:98730b92-6677-4ef0-bf88-3c8cf7a33504][Javascript]]

- Objects in js are created as key-value paris.
- Any object that is not a string, a number, a Symbol, or `true`, `false`, `null` or `undefined` is an object.

* Access property
#+begin_src js
const obj = {"name": "zhe", "age": 24};
console.log(obj["name"]);
console.log(obj.age);
#+end_src

* Property order

JS evaluate property by order when creating the obj, which means latter properties overwrite the previous properties with the same keys.

#+begin_src js
const obj = {
    a: 1,
    a: 2,
    a: 3,
};
// print {a: 3}
console.log(obj);
// print 3
console.log(obj.a);
#+end_src

* Add property
#+begin_src js
const obj = {"name": "zhe"};
obj.age = 24;
console.log(obj);
#+end_src

* Define a method

#+begin_src js
const obj = {};
obj.print = function() {
  console.log(obj);
};
obj.print();
#+end_src

* for-in-Loop

loop through all property keys of an object, and will go up to prototype chain.`

#+begin_src js
const obj = {
  "name": "zhe",
  "age": 25,
  [Symbol("name")]: "zhe",
};

const obj2 = Object.create(obj);

for (let i in obj2) {
  console.log(i);
}
#+end_src

* Symbol key

Notes
  - you cannot use dot notation for symbol keys.
  - for-in-Loop usually ignores symbol key properties

  #+begin_src js
    const name = Symbol("name");
    const obj = {};
    obj[name] = "zhe";
    console.log(obj)

    // or 
    const obj2 = {
    Symbol("name") : "zhe"
    };

    
  #+end_src

* Disable add/delete properties of an object
#+begin_src js
const obj = {};
obj.a = "a";
console.log(obj);
Object.seal(obj);
obj.b = "b";
console.log(obj);
#+end_src

* Find obj's prototype

#+begin_src js
const p = {
  "h": 1,
};

const c = Object.create(p);

console.log(p.isPrototypeOf(c));
console.log(Reflect.getPrototypeOf(c));
#+end_src
